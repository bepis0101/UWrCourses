// Borys Adamiak


domain Piece = empty | x | o
domain Player = x | o
domain Position = P(I, J) where I in 0..2, J in 0..2
domain Score = 50 | 0 | 100
domain Dice = D(N) where N in 0..8



board : Position -> Piece = { P(I, J) = empty where I in 0..2, J in 0..2 }

next_d1 : Position -> Position
next_d1(P(I, J)) = if I == J then P((I + 1) % 3, (J + 1) % 3) else P(I, J)

next_d2 : Position -> Position
next_d2(P(I, J)) = if I + J == 2 then P((I + 1) % 3, (J - 1) % 3) else P(I, J)

next_h : Position -> Position
next_h(P(I, J)) = P(I, (J + 1) % 3)

next_v : Position -> Position
next_v(P(I, J)) = P((I + 1) % 3, J)

throw : Dice

map_dice : Dice -> Position = { 
  D(N) = 
    if N < 3 
    then P(N%3, 0) else
    if N < 6
    then P(N%3, 1) else
    if N < 9 
    then P(N%3, 2)
    else P(0, 0)
  where N in 0..8
}

op : Player -> Player
op(x) = o
op(o) = x

position : Position

graph findNonempty() {
  forall p:Position {
    check(board[p] == empty)
  }
}

graph win() {
  branch {
    check(position != next_d1(position))
    check(board[position] == board[next_d1(position)])
    check(board[position] == board[next_d1(next_d1(position))])
  } or {
    check(position != next_d2(position))
    check(board[position] == board[next_d2(position)])
    check(board[position] == board[next_d2(next_d2(position))])
  } or {
    check(board[position] == board[next_h(position)])
    check(board[position] == board[next_h(next_h(position))])
  } or {
    check(board[position] == board[next_v(position)])
    check(board[position] == board[next_v(next_v(position))])
  }
}

graph turn(me: Player) {  
  player = me // empty move
  player = keeper
  forall dice:Dice {
    throw = dice
    check(board[map_dice(throw)] == empty)
    position = map_dice(throw)
    $ dice
  }

  board[position] = me

  if reachable(win()) {
    goals[me] = 100
    goals[op[me]] = 0
    end()
  }

  if not(reachable(findNonempty())) {
    end()
  }
}

graph rules() {
  loop {
    turn(x)
    turn(o)
  }
}